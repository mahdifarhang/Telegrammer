# Generated by Django 4.2.2 on 2023-07-04 16:16

import core.models.user
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('created_by', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'base_manager_name': 'objects',
                'default_manager_name': 'objects',
            },
            managers=[
                ('objects', core.models.user.UserManager()),
                ('all_objects', core.models.user.UserAllManager()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=30)),
                ('created_by', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'base_manager_name': 'objects',
                'default_manager_name': 'objects',
            },
            managers=[
                ('objects', core.models.project.ProjectManager()),
                ('all_objects', core.models.project.ProjectAllManager()),
            ],
        ),
        migrations.CreateModel(
            name='TelegramBot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=50)),
                ('token', models.CharField(max_length=70, unique=True)),
                ('username', models.CharField(max_length=60, unique=True)),
                ('bot_id', models.CharField(max_length=64, unique=True)),
                ('created_by', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Telegram Bot',
                'verbose_name_plural': 'Telegram Bot',
                'base_manager_name': 'objects',
                'default_manager_name': 'objects',
            },
            managers=[
                ('objects', core.models.telegram_bot.TelegramBotManager()),
                ('all_objects', core.models.telegram_bot.TelegramBotAllManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_users', related_query_name='project_user', to='core.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_projects', related_query_name='user_project', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Project',
                'verbose_name_plural': 'User Projects',
            },
        ),
        migrations.CreateModel(
            name='TelegramBotProjectAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_telegram_bots', related_query_name='project_telegram_bot', to='core.project')),
                ('telegram_bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telegram_bot_projects', related_query_name='telegram_bot_project', to='core.telegrambot')),
            ],
            options={
                'verbose_name': 'Telegram Bot Project Access',
                'verbose_name_plural': 'Telegram Bot Project Accesses',
            },
        ),
        migrations.AddField(
            model_name='telegrambot',
            name='projects',
            field=models.ManyToManyField(blank=True, related_name='telegram_bots', related_query_name='telegram_bot', through='core.TelegramBotProjectAccess', to='core.project'),
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='projects', related_query_name='project', through='core.UserProject', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='userproject',
            constraint=models.UniqueConstraint(fields=('user', 'project'), name='unique_together_user_projects'),
        ),
        migrations.AddConstraint(
            model_name='telegrambotprojectaccess',
            constraint=models.UniqueConstraint(fields=('telegram_bot', 'project'), name='unique_together_telegram_bot_projects'),
        ),
    ]
